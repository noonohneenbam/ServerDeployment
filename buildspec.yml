version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.7
    commands:
      - echo 'about to call dockerd'
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - echo "Fixing Amazon Corretto GPG key error..."
      - curl -s https://apt.corretto.aws/corretto.key | apt-key add - || { echo "Failed to add GPG key"; exit 1; }
      - rm -f /var/lib/apt/lists/lock
      - rm -f /var/cache/apt/archives/lock
      - apt-get clean
      - apt-get update -o Acquire::Retries=3 || (sleep 5 && apt-get update -o Acquire::Retries=3)
      - apt-get -y install jq || { echo "Failed to install jq"; exit 1; }
      - echo "Installing kubectl..."
      - curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.9/2024-01-04/bin/linux/amd64/kubectl
      - curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.9/2024-01-04/bin/linux/amd64/kubectl.sha256
      - sha256sum -c kubectl.sha256 || { echo "kubectl checksum validation failed"; exit 1; }
      - chmod +x ./kubectl
      - mv ./kubectl /usr/local/bin/kubectl
      - echo "Setting up Python environment..."
      - python -m venv venv
      - source venv/bin/activate
      - pip install --upgrade pip awscli pytest || { echo "Failed to install Python packages"; exit 1; }
  pre_build:
    commands:
      - echo "Preparing for build..."
      - TAG="$REPOSITORY_NAME.$REPOSITORY_BRANCH.$ENVIRONMENT_NAME.$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' simple_jwt_api.yml
      - $(aws ecr get-login --no-include-email)
      - export KUBECONFIG=$HOME/.kube/config
      - ls -l
      - pip install -r requirements.txt || { echo "Failed to install dependencies from requirements.txt"; exit 1; }
  build:
    commands:
      - echo "Building Docker image..."
      - docker build --tag $REPOSITORY_URI:$TAG . || { echo "Docker build failed"; exit 1; }
  post_build:
    commands:
      - echo "Pushing Docker image..."
      - docker push $REPOSITORY_URI:$TAG || { echo "Docker push failed"; exit 1; }
      - echo "Updating EKS configuration..."
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --role-arn $EKS_KUBECTL_ROLE_ARN || { echo "Failed to update kubeconfig"; exit 1; }
      - kubectl apply -f simple_jwt_api.yml || { echo "kubectl apply failed"; exit 1; }
      - printf '[{"name":"simple_jwt_api","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json
artifacts:
  files:
    - build.json
env:
  parameter-store:
    JWT_SECRET: JWT_SECRET
